-- 1. Опишите преимущества NoSQL
Нереляционные базы данных предлагают динамическую структуру данных, которые могут храниться несколькими способами: ориентированно по колонкам, документо-ориентированно, в виде графов или на основе пар «ключ-значение». Такая гибкость означает следующее:
•	можно создавать документы, не задавая их структуру заранее;
•	каждый документ может обладать собственной структурой;
•	у каждой базы данных может быть собственный синтаксис;
•	можно добавлять поля прямо во время работы с данными.
В NoSQL базы данных горизонтально масштабируемы: можно увеличивать трафик, распределяя его или добавляя больше серверов к вашей СУБД.
В NoSQL данные представлены в виде документов, пар «ключ-значение», графов или wide-column хранилищ. 

-- 2. Добавить коллекцию в БД - admin (SQL, NoSQL)
Не поняла. Здесь тоже нужно запрос написать? Мы же добавляем коллекцию через интерфейс?

-- 3. Подключиться к БД (SQL, NoSQL)
use admin --NoSQL
USE admin; --SQL

-- 4. Получить все данные (SQL, NoSQL)
db.episodes.find({$comment: "SELECT * FROM episodes;"})

-- 5. Получить данные эпизода “Gray Matter” (SQL, NoSQL)
db.episodes.find({"title": 'Gray Matter', $comment: "SELECT * FROM episodes WHERE title = 'Gray Matter';"})

-- 6. Получить название первого эпизода (SQL, NoSQL)
db.episodes.find({"season": '1', "episode": '1', $comment: "SELECT title FROM episodes WHERE season = '1' AND episode = '1';"}, {"title": 1})
   -- Сериала два, по какому из них фильтровать?

-- 7. Получить все эпизоды, где есть персонаж Jimmy McGill (SQL, NoSQL)
db.episodes.find({"characters": 'Jimmy McGill', $comment: "SELECT * FROM episodes WHERE characters LIKE '%Jimmy McGill%';"})
   -- "Получть все эпизоды..." - все данные по этим эпизодам? Или какие-то определенные?
   
-- 8. Получить первый эпизод 3 сезона (SQL, NoSQL)
db.episodes.find({"season": '3', "episode": '1', $comment: "SELECT * FROM episodes WHERE season = '3' AND episode = '1';"})

-- 9. Получить общее количество документов в коллекции (SQL, NoSQL)
db.episodes.countDocuments({$comment: "SELECT COUNT(*) FROM episodes;"})

-- 10. Получить 5 последних эпизодов (SQL, NoSQL)
db.episodes.find({$comment: "SELECT * FROM episodes ORDER BY air_date DESC LIMIT 5;"}).sort({"air_date": -1}).limit(5)

-- 11. Получить данные эпизода(-ов), где в массиве персонажей - "Jimmy McGill", "Mike Erhmantraut", "Kim Wexler", "Howard Hamlin", "Chuck McGill", "Nacho Varga" (NoSQL)
db.episodes.find({"characters": ["Jimmy McGill", "Mike Erhmantraut", "Kim Wexler", "Howard Hamlin", "Chuck McGill", "Nacho Varga"]})

-- 12. Получить эпизоды, где 5 персонажей (NoSQL)
db.episodes.find({"characters": {$size: 5}})

-- 13. Получить все эпизоды, где больше 5 персонажей (NoSQL)
db.episodes.find({"characters": {$exists:true}, $where: 'this.characters.length>5'})

-- 14. Получить данные, где 4 сезон или 10 серия (SQL, NoSQL)
db.episodes.find({$or: [{"season": '4'}, {"episode": '10'}], $comment: "SELECT * FROM episodes WHERE season = '4' OR episode = '10';"})

-- 15. Получить данные, где 4 сезон и 10 серия (SQL, NoSQL)
db.episodes.find({$and: [{"season": '4'}, {"episode": '10'}], $comment: "SELECT * FROM episodes WHERE season = '4' AND episode = '10';"})

-- 16. Получить данные, где не 4 сезон (SQL, NoSQL)
db.episodes.find({"season": {$ne: '4'}, $comment: "SELECT * FROM episodes WHERE NOT season = '4';"})
